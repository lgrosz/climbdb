BEGIN;
SELECT plan(19);

SELECT has_table( 'formation_closures' );

SELECT has_column( 'formation_closures', 'formation_id' );
SELECT col_is_pk( 'formation_closures', 'formation_id' );
SELECT col_is_fk( 'formation_closures', 'formation_id' );

SELECT has_column( 'formation_closures', 'super_formation_id' );
SELECT col_is_fk( 'formation_closures', 'super_formation_id' );

SELECT has_column( 'formation_closures', 'super_area_id' );
SELECT col_is_fk( 'formation_closures', 'super_area_id' );

SELECT has_check('formation_closures');

SELECT has_function( 'check_formation_closures_cycle' );

SELECT has_trigger( 'formation_closures', 'prevent_formation_closures_cycle' );

PREPARE get_closure AS SELECT * FROM formation_closures WHERE formation_id = $1;

PREPARE insert_closure AS
    INSERT INTO formation_closures ( formation_id, super_formation_id, super_area_id )
    VALUES ( $1, $2, $3 );

CREATE FUNCTION test_formation_id_cascade_on_delete()
RETURNS SETOF TEXT
AS $$
DECLARE
    formation_a formations%ROWTYPE;
    formation_b formations%ROWTYPE;
BEGIN

    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_a;
    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_b;

    EXECUTE format('EXECUTE insert_closure(%s, %s, %s)', formation_a.id, formation_b.id, 'NULL');

    RETURN NEXT isnt_empty(format('EXECUTE get_closure(%s)', formation_a.id),
        'Formation closure record exists before cascade deletion');

    DELETE FROM formations WHERE id = formation_a.id;

    RETURN NEXT is_empty(format('EXECUTE get_closure(%s)', formation_a.id),
        'Formation closure record does not exist after cascade deletion');

END;
$$ LANGUAGE plpgsql;

SELECT * FROM test_formation_id_cascade_on_delete();

CREATE FUNCTION test_super_formation_id_restrict_on_delete()
RETURNS SETOF TEXT
AS $$
DECLARE
    formation_a formations%ROWTYPE;
    formation_b formations%ROWTYPE;
BEGIN

    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_a;
    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_b;

    EXECUTE format('EXECUTE insert_closure(%s, %s, %s)', formation_a.id, formation_b.id, 'NULL');

    RETURN NEXT isnt_empty(format('EXECUTE get_closure(%s)', formation_a.id),
        'Formation closure record exists before restrict deletion');

    PREPARE delete_formation AS DELETE FROM formations WHERE id = $1;

    RETURN NEXT throws_ok(format('EXECUTE delete_formation(%s)', formation_b.id),
        '23503',
        'update or delete on table "formations" violates foreign key constraint "formation_closures_super_formation_id_fkey" on table "formation_closures"',
        'Restrict super-formation deletion when closure present');

END;
$$ LANGUAGE plpgsql;

SELECT * FROM test_super_formation_id_restrict_on_delete();

CREATE FUNCTION test_super_area_id_restrict_on_delete()
RETURNS SETOF TEXT
AS $$
DECLARE
    formation_a formations%ROWTYPE;
    area_b areas%ROWTYPE;
BEGIN

    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_a;
    INSERT INTO areas DEFAULT VALUES RETURNING * INTO area_b;

    EXECUTE format('EXECUTE insert_closure(%s, %s, %s)', formation_a.id, 'NULL', area_b.id);

    RETURN NEXT isnt_empty(format('EXECUTE get_closure(%s)', formation_a.id),
        'Formation closure record exists before restrict deletion');

    PREPARE delete_area AS DELETE FROM areas WHERE id = $1;

    RETURN NEXT throws_ok(format('EXECUTE delete_area(%s)', area_b.id),
        '23503',
        'update or delete on table "areas" violates foreign key constraint "formation_closures_super_area_id_fkey" on table "formation_closures"',
        'Restrict super-area deletion when closure present');

END;
$$ LANGUAGE plpgsql;

SELECT * FROM test_super_area_id_restrict_on_delete();

CREATE FUNCTION test_super_xor_check()
RETURNS SETOF TEXT
AS $$
DECLARE
    formation_a formations%ROWTYPE;
    formation_b formations%ROWTYPE;
    area_c areas%ROWTYPE;
BEGIN

    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_a;
    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_b;
    INSERT INTO areas DEFAULT VALUES RETURNING * INTO area_c;

    RETURN NEXT throws_ok(
        format('EXECUTE insert_closure(%s, %s, %s)', formation_a.id, formation_b.id, area_c.id),
        '23514',
        'new row for relation "formation_closures" violates check constraint "formation_closures_check"',
        'super_formation_id and super_area_id are mutually exclusive'
    );

END;
$$ LANGUAGE plpgsql;

SELECT * FROM test_super_xor_check();

CREATE FUNCTION test_prevent_formation_closures_cycle()
RETURNS SETOF TEXT
AS $$
DECLARE
    formation_a formations%ROWTYPE;
    formation_b formations%ROWTYPE;
BEGIN

    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_a;
    INSERT INTO formations DEFAULT VALUES RETURNING * INTO formation_b;

    EXECUTE format('EXECUTE insert_closure(%s, %s, %s)', formation_a.id, formation_b.id, 'NULL');

    RETURN NEXT throws_ok(
        format('EXECUTE insert_closure(%s, %s, %s)', formation_b.id, formation_a.id, 'NULL'),
        'P0001',
        'Formation closure cycle detected',
        'Restrict insertion when record would create a cycle'
        );

END;
$$ LANGUAGE plpgsql;

SELECT * FROM test_prevent_formation_closures_cycle();

SELECT * FROM finish();
ROLLBACK;

