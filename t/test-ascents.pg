BEGIN;
SELECT plan(10);

SELECT has_table( 'ascents' );

SELECT has_column( 'ascents', 'id' );
SELECT col_is_pk( 'ascents', 'id' );

SELECT has_column( 'ascents', 'climb_id' );
SELECT col_is_fk( 'ascents', 'climb_id' );
SELECT col_not_null( 'ascents', 'climb_id');

SELECT has_column( 'ascents', 'date_window' );
SELECT col_type_is( 'ascents', 'date_window', 'daterange' );

PREPARE get_ascent AS SELECT * FROM ascents WHERE climb_id = $1;

PREPARE insert_ascent AS
    INSERT INTO ascents ( climb_id )
    VALUES ( $1 );

CREATE FUNCTION test_climb_id_cascade_on_delete()
RETURNS SETOF TEXT
AS $$
DECLARE
    climb climbs%ROWTYPE;
BEGIN

    INSERT INTO climbs DEFAULT VALUES RETURNING * INTO climb;

    EXECUTE format( 'EXECUTE insert_ascent(%s)', climb.id );

    RETURN NEXT isnt_empty(format('EXECUTE get_ascent(%s)', climb.id),
        'Ascent row exists before climb deletion');

    DELETE FROM climbs WHERE id = climb.id;

    RETURN NEXT is_empty(format('EXECUTE get_ascent(%s)', climb.id),
        'Ascent row does not exist after climb deletion');

END;
$$ LANGUAGE plpgsql;

SELECT * from test_climb_id_cascade_on_delete();

SELECT * FROM finish();
ROLLBACK;

